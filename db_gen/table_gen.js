var aws = require('aws-sdk');var doc = require('dynamodb-doc');var fs = require('fs');aws.config.update({    accessKeyId: process.env.ACCESS_KEY || 'Temp',    secretAccessKey: process.env.SECRET_KEY || 'Temp',    endpoint: process.env.DYNAMODB_ENDPOINT || 'http://192.168.99.100:8000',    region: process.env.AWS_REGION || 'us-east-1'});var schema = process.env.SCHEMA_LOCATION || './tables/';var sampleData = process.env.DATA_LOCATION || './table_data/';var dynamodb = new doc.DynamoDB(new aws.DynamoDB());fs.readdir(schema, function(err, items) {    if (err) {        console.log(err);    } else {        items.map(makeTable)    }});function makeTable(item){    var table = item.split(".")[0];    console.log('making table ' + table);    deleteTable(table)        .then(createTable)        .then(loadData)        .catch(function(err) { console.log(err.stack) });}function deleteTable(tableName) {    return new Promise(function(resolve, reject) {        dynamodb.deleteTable({ TableName: tableName }, function(err, data) {            if (err && err.code === 'ResourceNotFoundException') {                console.log('WARN: can\'t delete ' + tableName + ' table because it does not exist');            } else if (err) {                return reject(err);            }            dynamodb.waitFor('tableNotExists', { TableName: tableName }, function(err, data) {                if (err) {                    return reject(err);                } else {                    return resolve(tableName);                }            });        });    });}function createTable(tableName) {    return new Promise(function(resolve, reject) {        try {            var params = require(schema + tableName + '.json');        } catch (err) {            return reject(err);        }        dynamodb.createTable(params, function(err, data) {            if (err) {                return reject(err);            }            dynamodb.waitFor('tableExists', { TableName: tableName }, function(err, data) {                if (err) {                    return reject(err);                } else {                    console.log('table created: ' + tableName);                    return resolve(tableName);                }            });        });    });}function loadData(tableName) {    try {        var items = require(sampleData + tableName + '.json');    } catch (err) {        console.log(err);        return;    }    var requestItem = {};    requestItem[tableName] = [];    var requests = [];    items.forEach((current, index) => {        requestItem[tableName].push({            PutRequest: {                Item: current            }        });        if (index % 25 === 0) {            requests.push(requestItem);            requestItem[tableName] = [];        }    });    if (requestItem[tableName].length > 0) {        requests.push(requestItem);    }    requests.map((request) => {        dynamodb.batchWriteItem({ RequestItems: request }, function(err, data) {                if (err) {                    console.log('error in batch write for ' + tableName + ': ' + err);                } else {                    console.log("items saved for " + tableName);                }            });    });}